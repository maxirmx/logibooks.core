// <auto-generated />
using System;
using Logibooks.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logibooks.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806102156_0_8_5_SupportPartnerColor")]
    partial class _0_8_5_SupportPartnerColor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("check_status_id");

                    b.Property<short>("CountryCode")
                        .HasColumnType("smallint")
                        .HasColumnName("country_code");

                    b.Property<long>("PartnerColor")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_color");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<int>("RegisterId")
                        .HasColumnType("integer")
                        .HasColumnName("register_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<string>("TnVed")
                        .HasColumnType("text")
                        .HasColumnName("tn_ved");

                    b.HasKey("Id");

                    b.HasIndex("CheckStatusId");

                    b.HasIndex("CountryCode");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "RegisterId", "CheckStatusId", "Id" }, "IX_base_orders_registerid_checkstatusid_id");

                    b.HasIndex(new[] { "TnVed" }, "IX_base_orders_tn_ved");

                    b.ToTable("base_orders", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrderFeacnPrefix", b =>
                {
                    b.Property<int>("BaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("base_order_id");

                    b.Property<int>("FeacnPrefixId")
                        .HasColumnType("integer")
                        .HasColumnName("feacn_prefix_id");

                    b.HasKey("BaseOrderId", "FeacnPrefixId");

                    b.HasIndex("FeacnPrefixId");

                    b.ToTable("base_order_feacn_prefixes");
                });

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrderStopWord", b =>
                {
                    b.Property<int>("BaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("base_order_id");

                    b.Property<int>("StopWordId")
                        .HasColumnType("integer")
                        .HasColumnName("stop_word_id");

                    b.HasKey("BaseOrderId", "StopWordId");

                    b.HasIndex("StopWordId");

                    b.ToTable("base_order_stop_words");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<short>("CountryIsoNumeric")
                        .HasColumnType("smallint")
                        .HasColumnName("country_iso_numeric");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<string>("Kpp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kpp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.HasIndex("CountryIsoNumeric");

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.ToTable("companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Москва",
                            CountryIsoNumeric = (short)643,
                            Inn = "7704217370",
                            Kpp = "997750001",
                            Name = "ООО \"Интернет Решения\"",
                            PostalCode = "123112",
                            ShortName = "",
                            Street = "Пресненская набережная д.10, пом.1, этаж 41, ком.6"
                        },
                        new
                        {
                            Id = 2,
                            City = "д. Коледино",
                            CountryIsoNumeric = (short)643,
                            Inn = "9714053621",
                            Kpp = "507401001",
                            Name = "",
                            PostalCode = "",
                            ShortName = "ООО \"РВБ\"",
                            Street = "Индустриальный Парк Коледино, д.6, стр.1"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.Country", b =>
                {
                    b.Property<short>("IsoNumeric")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("iso_numeric");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("IsoNumeric"));

                    b.Property<string>("IsoAlpha2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso_alpha2");

                    b.Property<DateTime>("LoadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loaded_at");

                    b.Property<string>("NameEnCldr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_en_cldr");

                    b.Property<string>("NameEnFormal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_en_formal");

                    b.Property<string>("NameEnOfficial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_en_official");

                    b.Property<string>("NameEnShort")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_en_short");

                    b.Property<string>("NameRuFormal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_ru_formal");

                    b.Property<string>("NameRuOfficial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_ru_official");

                    b.Property<string>("NameRuShort")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_ru_short");

                    b.HasKey("IsoNumeric");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            IsoNumeric = (short)643,
                            IsoAlpha2 = "RU",
                            LoadedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            NameEnCldr = "Rusia",
                            NameEnFormal = "the Russian Federation",
                            NameEnOfficial = "Russian Federation",
                            NameEnShort = "Russian Federation (the)",
                            NameRuFormal = "Российская Федерация",
                            NameRuOfficial = "Российская Федерация",
                            NameRuShort = "Российская Федерация"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.CustomsProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Code")
                        .HasColumnType("smallint")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("customs_procedures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = (short)10,
                            Name = "Экспорт"
                        },
                        new
                        {
                            Id = 2,
                            Code = (short)60,
                            Name = "Реимпорт"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("feacn_orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Подлежит ветеринарному контролю",
                            Enabled = true,
                            Title = "Решение Комиссии Таможенного союза от 18 июня 2010 г. N 317 \"О применении ветеринарно-санитарных мер в Евразийском экономическом союзе\"",
                            Url = "10sr0317"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Подлежит карантинному фитосанитарному контролю",
                            Enabled = true,
                            Title = "Решение Комиссии Таможенного союза от 18 июня 2010 г. N 318 \"Об обеспечении карантина растений в Евразийском экономическом союзе\"",
                            Url = "10sr0318"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Операции в отношении драгоценных металлов и драгоценных камней",
                            Enabled = true,
                            Title = "Приказ ФТС России от 12 мая 2011 г. N 971 \"О компетенции таможенных органов по совершению таможенных операций в отношении драгоценных металлов и драгоценных камней\"",
                            Url = "11pr0971"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Временный запрет на вывоз",
                            Enabled = true,
                            Title = "Постановление Правительства РФ от 09.03.2022 № 311 \"О мерах по реализации Указа Президента Российской Федерации от 8 марта 2022 г. N 100\"",
                            Url = "22ps0311"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Разрешительный порядок вывоза",
                            Enabled = true,
                            Title = "Постановление Правительства Российской Федерации от 9 марта 2022 г. N 312 \"О введении на временной основе разрешительного порядка вывоза отдельных видов товаров за пределы территории Российской Федерации\"",
                            Url = "22ps0312"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnPrefix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FeacnOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("feacn_order_id");

                    b.Property<string>("IntervalCode")
                        .HasColumnType("text")
                        .HasColumnName("interval_code");

                    b.HasKey("Id");

                    b.HasIndex("FeacnOrderId");

                    b.ToTable("feacn_prefixes");
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnPrefixException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("FeacnPrefixId")
                        .HasColumnType("integer")
                        .HasColumnName("feacn_prefix_id");

                    b.HasKey("Id");

                    b.HasIndex("FeacnPrefixId");

                    b.ToTable("feacn_prefix_exceptions");
                });

            modelBuilder.Entity("Logibooks.Core.Models.ParcelCheckStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("check_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Не проверен"
                        },
                        new
                        {
                            Id = 101,
                            Title = "Запрет"
                        },
                        new
                        {
                            Id = 102,
                            Title = "Неправильный формат ТН ВЭД"
                        },
                        new
                        {
                            Id = 103,
                            Title = "Несуществующий ТН ВЭД"
                        },
                        new
                        {
                            Id = 200,
                            Title = "Отмечено партнёром"
                        },
                        new
                        {
                            Id = 201,
                            Title = "Ок"
                        },
                        new
                        {
                            Id = 301,
                            Title = "Согласовано"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.ParcelStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Не известен"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int>("CustomsProcedureId")
                        .HasColumnType("integer")
                        .HasColumnName("customs_procedure_id");

                    b.Property<DateTime>("DTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtime");

                    b.Property<string>("DealNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deal_number");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<DateOnly?>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<int?>("TheOtherCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("the_other_company_id");

                    b.Property<short?>("TheOtherCountryCode")
                        .HasColumnType("smallint")
                        .HasColumnName("the_other_country_code");

                    b.Property<int>("TransportationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("transportation_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomsProcedureId");

                    b.HasIndex("TheOtherCompanyId");

                    b.HasIndex("TheOtherCountryCode");

                    b.HasIndex("TransportationTypeId");

                    b.ToTable("registers");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "logist",
                            Title = "Логист"
                        },
                        new
                        {
                            Id = 2,
                            Name = "administrator",
                            Title = "Администратор"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.StopWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("match_type_id");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("Id");

                    b.HasIndex("MatchTypeId");

                    b.HasIndex(new[] { "Word" }, "IX_stop_words_word")
                        .IsUnique();

                    b.ToTable("stop_words");
                });

            modelBuilder.Entity("Logibooks.Core.Models.StopWordMatchType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("stop_word_match_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Точная последовательность букв, цифр и проблелов"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Точное слово"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Фраза (последовательность слов)"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Слово и его формы (Золото -> c золотом, о золоте, ...)"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Слово и однокоренные (Золото -> золотой, золотистый, ...)"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.TransportationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Code")
                        .HasColumnType("numeric(2)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("transportation_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 0m,
                            Name = "Авиа"
                        },
                        new
                        {
                            Id = 2,
                            Code = 1m,
                            Name = "Авто"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "maxirmx@sw.consulting",
                            FirstName = "Maxim",
                            LastName = "Samsonov",
                            Password = "$2b$12$eOXzlwFzyGVERe0sNwFeJO5XnvwsjloUpL4o2AIQ8254RT88MnsDi",
                            Patronymic = ""
                        },
                        new
                        {
                            Id = 2,
                            Email = "director@global-tc.ru",
                            FirstName = "Эльдар",
                            LastName = "Сергутов",
                            Password = "$2a$11$KUvUbYg79OvDjq9xFKw1Ge4AYboMse4xduI.ZD54vp28zkb4DjWfK",
                            Patronymic = "Юрьевич"
                        },
                        new
                        {
                            Id = 3,
                            Email = "wild@global-tc.ru",
                            FirstName = "Полина",
                            LastName = "Баландина",
                            Password = "$2a$11$zA1ohkl1U6UGbkhUlNvtTexHkbQ7CtiFnHTSsBc4xz8a5BY8D9yDS",
                            Patronymic = "Анатольевна"
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Logibooks.Core.Models.OzonOrder", b =>
                {
                    b.HasBaseType("Logibooks.Core.Models.BaseOrder");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Article")
                        .HasColumnType("text")
                        .HasColumnName("article");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("BoxNumber")
                        .HasColumnType("text")
                        .HasColumnName("box_number");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Cmn")
                        .HasColumnType("text")
                        .HasColumnName("cmn");

                    b.Property<string>("CmnId")
                        .HasColumnType("text")
                        .HasColumnName("cmn_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("description_en");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Imei")
                        .HasColumnType("text")
                        .HasColumnName("imei");

                    b.Property<string>("Imei2")
                        .HasColumnType("text")
                        .HasColumnName("imei_2");

                    b.Property<string>("Inn")
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text")
                        .HasColumnName("manufacturer");

                    b.Property<string>("OzonId")
                        .HasColumnType("text")
                        .HasColumnName("ozon_id");

                    b.Property<DateOnly?>("PassportIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("passport_issue_date");

                    b.Property<string>("PassportIssuedBy")
                        .HasColumnType("text")
                        .HasColumnName("passport_issued_by");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text")
                        .HasColumnName("passport_number");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("text")
                        .HasColumnName("passport_series");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int?>("PlacesCount")
                        .HasColumnType("integer")
                        .HasColumnName("places_count");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("PostingNumber")
                        .HasColumnType("text")
                        .HasColumnName("posting_number");

                    b.Property<string>("ProductLink")
                        .HasColumnType("text")
                        .HasColumnName("product_link");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(10)")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("ShipmentWeightKg")
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("shipment_weight_kg");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("weight_kg");

                    b.HasIndex("PostingNumber");

                    b.ToTable("ozon_orders", (string)null);
                });

            modelBuilder.Entity("Logibooks.Core.Models.WbrOrder", b =>
                {
                    b.HasBaseType("Logibooks.Core.Models.BaseOrder");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<string>("BoxNumber")
                        .HasColumnType("text")
                        .HasColumnName("box_number");

                    b.Property<string>("Brand")
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Composition")
                        .HasColumnType("text")
                        .HasColumnName("composition");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("CustomsClearance")
                        .HasColumnType("text")
                        .HasColumnName("customs_clearance");

                    b.Property<string>("Declaration")
                        .HasColumnType("text")
                        .HasColumnName("declaration");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DutyPayment")
                        .HasColumnType("text")
                        .HasColumnName("duty_payment");

                    b.Property<string>("ExtId")
                        .HasColumnType("text")
                        .HasColumnName("ext_id");

                    b.Property<string>("FabricType")
                        .HasColumnType("text")
                        .HasColumnName("fabric_type");

                    b.Property<string>("FactoryAddress")
                        .HasColumnType("text")
                        .HasColumnName("factory_address");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("HeelHeight")
                        .HasColumnType("text")
                        .HasColumnName("heel_height");

                    b.Property<string>("Insole")
                        .HasColumnType("text")
                        .HasColumnName("insole");

                    b.Property<DateOnly?>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("Lining")
                        .HasColumnType("text")
                        .HasColumnName("lining");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<string>("OtherReason")
                        .HasColumnType("text")
                        .HasColumnName("other_reason");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text")
                        .HasColumnName("passport_number");

                    b.Property<string>("PersonalData")
                        .HasColumnType("text")
                        .HasColumnName("personal_data");

                    b.Property<string>("Pinfl")
                        .HasColumnType("text")
                        .HasColumnName("pinfl");

                    b.Property<string>("ProductLink")
                        .HasColumnType("text")
                        .HasColumnName("product_link");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(10)")
                        .HasColumnName("quantity");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("text")
                        .HasColumnName("recipient_address");

                    b.Property<string>("RecipientInn")
                        .HasColumnType("text")
                        .HasColumnName("recipient_inn");

                    b.Property<string>("RecipientName")
                        .HasColumnType("text")
                        .HasColumnName("recipient_name");

                    b.Property<int>("RowNumber")
                        .HasColumnType("integer")
                        .HasColumnName("row_number");

                    b.Property<string>("Shk")
                        .HasColumnType("text")
                        .HasColumnName("shk");

                    b.Property<string>("SiteArticle")
                        .HasColumnType("text")
                        .HasColumnName("site_article");

                    b.Property<string>("Size")
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("Sole")
                        .HasColumnType("text")
                        .HasColumnName("sole");

                    b.Property<string>("Sticker")
                        .HasColumnType("text")
                        .HasColumnName("sticker");

                    b.Property<string>("StickerCode")
                        .HasColumnType("text")
                        .HasColumnName("sticker_code");

                    b.Property<string>("Subcategory")
                        .HasColumnType("text")
                        .HasColumnName("subcategory");

                    b.Property<string>("Supplier")
                        .HasColumnType("text")
                        .HasColumnName("supplier");

                    b.Property<string>("SupplierInn")
                        .HasColumnType("text")
                        .HasColumnName("supplier_inn");

                    b.Property<string>("Unit")
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("weight_kg");

                    b.HasIndex(new[] { "Shk" }, "IX_wbr_orders_shk");

                    b.ToTable("wbr_orders", (string)null);
                });

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrder", b =>
                {
                    b.HasOne("Logibooks.Core.Models.ParcelCheckStatus", "CheckStatus")
                        .WithMany("Orders")
                        .HasForeignKey("CheckStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.Register", "Register")
                        .WithMany("Orders")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.ParcelStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckStatus");

                    b.Navigation("Country");

                    b.Navigation("Register");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrderFeacnPrefix", b =>
                {
                    b.HasOne("Logibooks.Core.Models.BaseOrder", "BaseOrder")
                        .WithMany("BaseOrderFeacnPrefixes")
                        .HasForeignKey("BaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.FeacnPrefix", "FeacnPrefix")
                        .WithMany("BaseOrderFeacnPrefixes")
                        .HasForeignKey("FeacnPrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseOrder");

                    b.Navigation("FeacnPrefix");
                });

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrderStopWord", b =>
                {
                    b.HasOne("Logibooks.Core.Models.BaseOrder", "BaseOrder")
                        .WithMany("BaseOrderStopWords")
                        .HasForeignKey("BaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.StopWord", "StopWord")
                        .WithMany("BaseOrderStopWords")
                        .HasForeignKey("StopWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseOrder");

                    b.Navigation("StopWord");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Company", b =>
                {
                    b.HasOne("Logibooks.Core.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryIsoNumeric")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnPrefix", b =>
                {
                    b.HasOne("Logibooks.Core.Models.FeacnOrder", "FeacnOrder")
                        .WithMany("FeacnPrefixes")
                        .HasForeignKey("FeacnOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeacnOrder");
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnPrefixException", b =>
                {
                    b.HasOne("Logibooks.Core.Models.FeacnPrefix", "FeacnPrefix")
                        .WithMany("FeacnPrefixExceptions")
                        .HasForeignKey("FeacnPrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeacnPrefix");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Register", b =>
                {
                    b.HasOne("Logibooks.Core.Models.Company", "Company")
                        .WithMany("Registers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.CustomsProcedure", "CustomsProcedure")
                        .WithMany()
                        .HasForeignKey("CustomsProcedureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.Company", "TheOtherCompany")
                        .WithMany("TheOtherRegisters")
                        .HasForeignKey("TheOtherCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logibooks.Core.Models.Country", "TheOtherCountry")
                        .WithMany()
                        .HasForeignKey("TheOtherCountryCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logibooks.Core.Models.TransportationType", "TransportationType")
                        .WithMany()
                        .HasForeignKey("TransportationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CustomsProcedure");

                    b.Navigation("TheOtherCompany");

                    b.Navigation("TheOtherCountry");

                    b.Navigation("TransportationType");
                });

            modelBuilder.Entity("Logibooks.Core.Models.StopWord", b =>
                {
                    b.HasOne("Logibooks.Core.Models.StopWordMatchType", "MatchType")
                        .WithMany("StopWords")
                        .HasForeignKey("MatchTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchType");
                });

            modelBuilder.Entity("Logibooks.Core.Models.UserRole", b =>
                {
                    b.HasOne("Logibooks.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logibooks.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Logibooks.Core.Models.OzonOrder", b =>
                {
                    b.HasOne("Logibooks.Core.Models.BaseOrder", null)
                        .WithOne()
                        .HasForeignKey("Logibooks.Core.Models.OzonOrder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logibooks.Core.Models.WbrOrder", b =>
                {
                    b.HasOne("Logibooks.Core.Models.BaseOrder", null)
                        .WithOne()
                        .HasForeignKey("Logibooks.Core.Models.WbrOrder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logibooks.Core.Models.BaseOrder", b =>
                {
                    b.Navigation("BaseOrderFeacnPrefixes");

                    b.Navigation("BaseOrderStopWords");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Company", b =>
                {
                    b.Navigation("Registers");

                    b.Navigation("TheOtherRegisters");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnOrder", b =>
                {
                    b.Navigation("FeacnPrefixes");
                });

            modelBuilder.Entity("Logibooks.Core.Models.FeacnPrefix", b =>
                {
                    b.Navigation("BaseOrderFeacnPrefixes");

                    b.Navigation("FeacnPrefixExceptions");
                });

            modelBuilder.Entity("Logibooks.Core.Models.ParcelCheckStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Logibooks.Core.Models.ParcelStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Register", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Logibooks.Core.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Logibooks.Core.Models.StopWord", b =>
                {
                    b.Navigation("BaseOrderStopWords");
                });

            modelBuilder.Entity("Logibooks.Core.Models.StopWordMatchType", b =>
                {
                    b.Navigation("StopWords");
                });

            modelBuilder.Entity("Logibooks.Core.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
